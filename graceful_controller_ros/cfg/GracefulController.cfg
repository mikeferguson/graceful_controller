#!/usr/bin/env python
# Graceful Controller configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("max_vel_x", double_t, 0, "The maximum x velocity for the robot in m/s", 0.5)
gen.add("min_vel_x", double_t, 0, "The minimum x velocity for the robot in m/s", 0.1)

gen.add("max_vel_theta", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  1.0, 0)
gen.add("min_in_place_vel_theta", double_t, 0, "The absolute value of the minimum in-place rotational velocity the controller will explore", 0.4, 0, 20.0)

gen.add("acc_lim_x", double_t, 0, "The acceleration limit of the robot in the x direction", 2.5, 0, 20.0)
gen.add("acc_lim_theta", double_t, 0, "The acceleration limit of the robot in the theta direction", 3.2, 0, 20.0)

gen.add("xy_goal_tolerance", double_t, 0, "Within what maximum distance we consider the robot to be in goal", 0.1)
gen.add("yaw_goal_tolerance", double_t, 0, "Within what maximum angle difference we consider the robot to face goal direction", 0.1)

# Parameters for control law
gen.add("k1", double_t, 0, "Ratio of rate of change of theta to rate of change of R", 2.0, 0, 10)
gen.add("k2", double_t, 0, "How quickly we converge to the slow manifold", 1.0, 0, 10)
gen.add("beta", double_t, 0, "Parameters for selecting velocity from curvature", 0.4, 0, 10)
gen.add("lambda", double_t, 0, "Parameters for selecting velocity from curvature", 2.0, 0, 10)

# Parameters for path following
gen.add("min_lookahead", double_t, 0, "Minimum distance to target goal", 0.05, 0)
gen.add("max_lookahead", double_t, 0, "Maximum distance to target goal", 1.0, 0)
gen.add("initial_rotate_tolerance", double_t, 0, "Tolerance for initial rotation to complete (0.0 to disable)", 0.1, 0)
gen.add("prefer_final_rotation", bool_t, 0, "Prefer an in-place rotation at the end pose when possible", False)

# Parameters for orientation filter
gen.add("compute_orientations", bool_t, 0, "Recompute plan orientations. Useful when global planner does not set proper orientations", True)
gen.add("use_orientation_filter", bool_t, 0, "Enables the orientation filter. Useful when global planner does not set proper orientations", True)
gen.add("yaw_filter_tolerance", double_t, 0, "Maximum deviation from beeline allowed before a pose is filtered", 0.0, 0.785)
gen.add("yaw_gap_tolerance", double_t, 0, "Maximum distance between poses in the filtered path", 0.0, 0.25)

exit(gen.generate("graceful_controller", "graceful_controller", "GracefulController"))
